import cv2 as cv
import numpy as np
import random



reads = [(124.7551366235967, 71.39525524253337, 47.453929252277064), (55.961919436495705, 92.04732555580013, 229.52850539291217), (69.90194326557963, 85.9374581192763, 152.32231404958677), (112.5917289925209, 61.20919489661241, 40.53717553893533), (58.05254819118035, 75.0720887245841, 128.9075785582255), (93.8597510373444, 122.08492392807746, 144.35020746887966), (59.33015943312666, 137.16585473870683, 150.94486271036317), (64.98264171413074, 131.76078112286413, 114.47653919175482), (60.19466145833333, 76.646484375, 79.35514322916666), (237.7281684698609, 222.03071870170015, 189.9729520865533), (122.40267785771383, 120.87230215827338, 245.32933653077538), (89.75869741100324, 90.52669902912622, 254.50343851132686), (207.9860465116279, 175.43316481294238, 76.44610717896866), (188.0432931156849, 184.71611071682045, 220.16938727229714), (147.5851194875585, 146.8369056417837, 238.4060113328406), (123.73975903614459, 175.1, 177.34698795180725), (147.24652432969216, 150.31876861966236, 209.64796425024826), (197.81130952380954, 196.94791666666669, 199.04375000000002), (56.071905339805824, 57.197208737864074, 220.3264563106796), (63.03780601177564, 170.16981716764798, 189.01828323520297), (70.04272698711907, 153.9660697455231, 39.07163053722903), (159.27881619937696, 83.30747663551402, 43.94704049844237), (85.13393501805054, 139.5162454873646, 28.58916967509025), (73.6829360575104, 148.11388573590617, 10.504351116155885), (171.46768178993162, 86.96519577377252, 21.082349285270354), (66.88072018004502, 103.43023255813954, 208.4377344336084), (150.6177033492823, 157.7665071770335, 175.56842105263158), (132.54976717112922, 132.093131548312, 132.50902211874273), (50.92482356551089, 133.68824792881253, 157.14636391531144), (56.60395427865308, 97.5841828853877, 70.21902996601791), (81.34028605482717, 113.12127532777114, 76.04797377830751), (47.860107334525935, 124.69731663685151, 154.70268336314848), (59.64619442351168, 92.9819140919367, 169.04935945742275), (52.72365269461078, 106.22365269461078, 87.08982035928143), (48.584729981378025, 104.67597765363128, 182.26778398510243), (48.41376146788991, 71.88990825688074, 167.77660550458717), (114.90480557593544, 206.16746148202495, 9.84336023477623), (211.4278672985782, 214.51488151658768, 186.71962085308056), (95.16182887497628, 147.650161259723, 249.43919559855814), (81.79604147031104, 86.92855796418473, 254.1545711592837), (83.57225691347011, 136.43487957181088, 253.942908117752), (102.67693722694872, 189.25959990802485, 66.39917222349966), (101.93842085379674, 144.24612769172649, 227.4280317340385), (205.2325956662056, 205.64914707238358, 198.0311203319502), (109.61111111111111, 216.67888888888888, 213.04583333333332), (39.51967771924388, 42.59157111868609, 198.7499225286644), (101.787166454892, 99.34053367217281, 173.88055908513343), (144.2895913154534, 140.5475734355045, 149.58461047254153), (151.4135433070866, 71.50771653543306, 24.943307086614173), (141.74897119341563, 67.84249906472128, 22.918443696221473), (139.59077040427155, 84.71548436308161, 33.80663615560641), (165.9639898024219, 76.95602294455067, 2.0025493945188018), (157.9322567940134, 110.70697124852303, 74.37376920047262), (151.80209823557462, 124.30233667143538, 105.17119694802098)]
print(len(reads))

def turnHSV(arr):
    tmp = np.zeros((1, len(arr), 3), np.uint8)
    for i in range(len(arr)):
        tmp[0][i] = np.array([arr[i][0], arr[i][1], arr[i][2]])
    tmp = cv.cvtColor(tmp, cv.COLOR_BGR2HSV)
    for i in range(len(arr)):
        arr[i] = [(float(tmp[0][i][0] + 30) % 180), float(tmp[0][i][1]), float(tmp[0][i][2])]
    return np.array(arr)

def turnBGR(arr):
    tmp = np.zeros((1), np.uint8)
    for (x, y, z) in arr:
        tmp[0].append([x, y, z])
    tmp = cv.cvtColor(tmp, cv.COLOR_HSV2BGR)
    for i in len(arr):
        arr[i] = float(tmp[0][i][0]), float(tmp[0][i][1]), float(tmp[0][i][2])
    return arr


kumeler = [[], [], [], [], [], []]
reads = turnHSV(reads)
reads = reads[reads[:,1].argsort()]
print(reads)
for i in range(9):
    kumeler[0].append(reads[i])
reads = reads[9:]

reads = reads[reads[:,0].argsort()]
for j in range(1, 6):
    for i in range(9):
        kumeler[j].append(reads[(j-1)*9 + i])

enson = np.zeros((600//2, 1500//2, 3), np.uint8)
for i in range(6):
    for j in range(len(kumeler[i])):
        enson = cv.rectangle(enson, (j*50, i*50), ((j+1)*50, (i+1)*50), (int(kumeler[i][j][0]), int(kumeler[i][j][1]), int(kumeler[i][j][2])), -1)

for i in enson:
    for j in i:
        j[0] = (j[0] + 150) % 180
enson = cv.cvtColor(enson, cv.COLOR_HSV2BGR)
cv.imshow('cikti', enson)
cv.waitKey()

exit(0)

def cdist(color1, color2):
    tmp = np.zeros((1, 2, 3), np.uint8)
    tmp[0] = [[color1[0], color1[1], color1[2]], [color2[0], color2[1], color2[2]]]
    tmp = cv.cvtColor(tmp, cv.COLOR_BGR2LAB)
    color1, color2 = (float(tmp[0][0][0]), float(tmp[0][0][1]), float(tmp[0][0][2])), (float(tmp[0][1][0]), float(tmp[0][1][1]), float(tmp[0][1][2]))

    L1star = color1[0]
    L2star = color2[0]
    a1star = color1[1]
    a2star = color2[1]
    b1star = color1[2]
    b2star = color2[2]

    return ((color1[0] - color2[0])**2 + (color1[1] - color2[1])**2 +  + (color1[2] - color2[2])**2)**0.5

enson = np.zeros((600//2, 1500//2, 3), np.uint8)
for i in range(6):
    for j in range(9):

        enson = cv.rectangle(enson, (j*50, i*50), ((j+1)*50, (i+1)*50), (int(reads[9*i+j][0]), int(reads[9*i+j][1]), int(reads[9*i+j][2])), -1)
cv.imshow('girdi', enson)
cv.waitKey()

#* K Means
centers = [reads[4], reads[13], reads[22], reads[31], reads[40], reads[49]]
for _ in range(100):
    kumeler = [[], [], [], [], [], []]
    for color in reads:
        mindist = 0
        for i in range(6):
            if cdist(color, centers[i]) < cdist(color, centers[mindist]):
                mindist = i
        kumeler[mindist].append(color)
    for i in range(6):
        yx, yy, yz = 0, 0, 0
        for color in kumeler[i]:
            yx += color[0]
            yy += color[1]
            yz += color[2]
        yx /= len(kumeler[i])
        yy /= len(kumeler[i])
        yz /= len(kumeler[i])
        centers[i] = (yx, yy, yz)
    
print(kumeler)
enson = np.zeros((600//2, 1500//2, 3), np.uint8)
for i in range(6):
    for j in range(len(kumeler[i])):
        enson = cv.rectangle(enson, (j*50, i*50), ((j+1)*50, (i+1)*50), (int(kumeler[i][j][0]), int(kumeler[i][j][1]), int(kumeler[i][j][2])), -1)
cv.imshow('cikti', enson)
cv.waitKey()
cv.waitKey()
cv.waitKey()
cv.waitKey()
cv.waitKey()
